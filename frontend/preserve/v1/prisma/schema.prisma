// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Workspace model - Represents the main business that pays for the service
model Workspace {
  id         String    @id @default(cuid())
  name       String
  orgNumber  String?   @unique
  address    String?
  postalCode String?
  city       String?
  country    String?
  email      String?
  phone      String?
  website    String?
  logo       String? // URL to logo image
  plan       String    @default("free") // free, basic, premium, enterprise
  planExpiry DateTime?
  maxUsers   Int       @default(5)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // Relations
  users        User[]
  businesses   Business[]
  applications JobApplication[]
  tickets      Ticket[]
  
  // AI Agent CEO relations
  agents              Agent[]
  agentTasks          AgentTask[]
  strategicInsights   StrategicInsight[]
  emailCampaigns      EmailCampaign[]
  socialMediaPosts    SocialMediaPost[]
  workflowExecutions  WorkflowExecution[]
  webhookLogs         WebhookLog[]
  businessMetrics     BusinessMetric[]

  @@map("workspaces")
}

// Workspace Role enum - defines user roles within a workspace
enum WorkspaceRole {
  admin // Full access to workspace settings and all data
  manager // Access to all data but limited workspace settings
  member // Regular access to assigned data
  viewer // Read-only access

  @@map("workspace_role")
}

// Unified Business/Lead model - Represents companies at any stage (lead to customer)

model Business {
  id                String         @id @default(cuid())
  name              String
  orgNumber         String?        @unique // Optional for early-stage leads
  address           String?
  postalCode        String?
  city              String?
  country           String?
  contactPerson     String?
  email             String
  phone             String
  website           String?
  industry          String?
  numberOfEmployees Int?
  revenue           Float?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  bilagCount        Int            @default(0)
  status            BusinessStatus
  stage             CustomerStage  @default(lead) // Tracks customer lifecycle

  // Fields specifically for leads
  potentialValue Float? // Potential value (only relevant for leads)

  // Customer-specific fields
  customerSince          DateTime?
  contractType           String?
  contractValue          Float?
  contractRenewalDate    DateTime?
  accountManager         String?
  paymentTerms           String?
  customerSegment        String?
  churnRisk              ChurnRiskLevel? @default(low)
  lastReviewDate         DateTime?
  npsScore               Int?
  preferredContactMethod ContactMethod?

  // SMS-related fields
  smsOptIn Boolean @default(false)

  // Workspace relation
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  // Relations
  contacts    Contact[]
  activities  Activity[]
  offers      Offer[]
  tags        Tag[]        @relation("BusinessToTag")
  Ticket      Ticket[]
  emailSyncs  EmailSync[]
  smsMessages SmsMessage[]
  
  // AI Agent CEO relations
  agentTasks          AgentTask[]
  strategicInsights   StrategicInsight[]
  campaignEvents      CampaignEvent[]
  businessMetrics     BusinessMetric[]

  @@index([workspaceId])
  @@map("businesses")
}

enum BusinessStatus {
  active
  inactive
}

enum CustomerStage {
  lead
  prospect
  qualified
  offer_sent // Offer sent
  offer_accepted // Offer accepted
  declined // Customer declined/wrong match
  customer
  churned

  @@map("customer_stage")
}

// Tag model - For categorizing businesses

model Tag {
  id         String     @id @default(cuid())
  name       String     @unique
  businesses Business[] @relation("BusinessToTag")
  tickets    Ticket[]   @relation("TicketToTag")

  @@map("tags")
}

// Contact model - People associated with businesses

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  phone     String
  position  String?
  isPrimary Boolean  @default(false)
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  businessId String
  business   Business     @relation(fields: [businessId], references: [id], onDelete: Cascade)
  activities Activity[]
  offers     Offer[]
  Ticket     Ticket[]
  emailSyncs EmailSync[]
  SmsMessage SmsMessage[]
  
  // AI Agent CEO relations
  agentTasks     AgentTask[]
  campaignEvents CampaignEvent[]

  @@map("contacts")
}

// Activity model - Interactions with businesses/contacts

model Activity {
  id          String       @id @default(cuid())
  type        ActivityType
  date        DateTime
  description String
  completed   Boolean      @default(false)
  outcome     String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  businessId       String?
  business         Business?       @relation(fields: [businessId], references: [id], onDelete: Cascade)
  contactId        String?
  contact          Contact?        @relation(fields: [contactId], references: [id], onDelete: SetNull)
  jobApplicationId String?
  jobApplication   JobApplication? @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
  userId           String // We would typically have a User model
  Ticket           Ticket?         @relation(fields: [ticketId], references: [id])
  ticketId         String?

  @@map("activities")
}

enum ActivityType {
  call
  meeting
  email
  note

  @@map("activity_type")
}

// Offer model - Sales proposals to businesses

model Offer {
  id          String      @id @default(cuid())
  title       String
  description String
  createdAt   DateTime    @default(now())
  expiresAt   DateTime
  status      OfferStatus
  totalAmount Float
  currency    String
  notes       String?
  updatedAt   DateTime    @updatedAt

  // Relations
  businessId String
  business   Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  contactId  String?
  contact    Contact?    @relation(fields: [contactId], references: [id], onDelete: SetNull)
  items      OfferItem[]

  @@map("offers")
}

enum OfferStatus {
  draft
  sent
  accepted
  rejected
  expired

  @@map("offer_status")
}

// OfferItem model - Line items in an offer

model OfferItem {
  id          String @id @default(cuid())
  description String
  quantity    Int
  unitPrice   Float
  discount    Float?
  tax         Float?
  total       Float

  // Relations
  offerId String
  offer   Offer  @relation(fields: [offerId], references: [id], onDelete: Cascade)

  @@map("offer_items")
}

// JobApplication model - For managing employment applications

model JobApplication {
  id              String               @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  phone           String
  address         String?
  postalCode      String?
  city            String?
  country         String?
  resume          String? // URL or path to the uploaded resume
  coverLetter     String? // URL or path to the uploaded cover letter or content
  experience      Int? // Years of experience
  education       String?
  skills          String[]
  desiredPosition String?
  currentEmployer String?
  expectedSalary  Float?
  startDate       DateTime?
  notes           String?
  source          String? // Where the application came from
  applicationDate DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  status          JobApplicationStatus @default(new)

  // Workspace relation
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  // Relations
  activities Activity[]

  @@index([workspaceId])
  @@map("job_applications")
}

enum JobApplicationStatus {
  new
  reviewing
  interviewed
  offer_extended
  hired
  rejected

  @@map("job_application_status")
}

// Ticket system models

model Ticket {
  id            String       @id @default(cuid())
  title         String
  description   String
  status        TicketStatus @default(unassigned)
  priority      Priority     @default(medium)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  dueDate       DateTime?
  resolvedAt    DateTime?
  estimatedTime Int? // Estimated time in minutes

  // Submission metadata
  submitterName        String?
  submitterEmail       String?
  submittedCompanyName String?

  // Relations
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  contactId  String?
  contact    Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)
  assigneeId String? // ID of user assigned to ticket
  creatorId  String? // ID of user who created ticket

  // Direct workspace relation
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  // Child relations
  comments   TicketComment[]
  activities Activity[]
  tags       Tag[]           @relation("TicketToTag")

  @@index([workspaceId])
  @@map("tickets")
}

model TicketComment {
  id         String   @id @default(cuid())
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isInternal Boolean  @default(false)

  // Relations
  ticketId String
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  authorId String // ID of user who wrote comment

  @@map("ticket_comments")
}

enum TicketStatus {
  unassigned // Newly received, pending business assignment
  open // Assigned to business but not being worked on
  in_progress // Being actively worked on
  waiting_on_customer
  waiting_on_third_party
  resolved
  closed

  @@map("ticket_status")
}

enum Priority {
  low
  medium
  high
  urgent

  @@map("priority")
}

model User {
  id            String         @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  phone         String?
  jobTitle      String?
  company       String?
  workspaceId   String?
  workspace     Workspace?     @relation(fields: [workspaceId], references: [id])
  workspaceRole WorkspaceRole  @default(member)
  department    String?
  timezone      String?
  bio           String?
  role          String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  emailProvider EmailProvider?
  emailSyncs    EmailSync[]

  @@unique([email])
  @@index([workspaceId])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model EmailProvider {
  id           String      @id @default(cuid())
  userId       String      @unique
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     String // "google" | "microsoft"
  email        String
  accessToken  String      @db.Text
  refreshToken String?     @db.Text
  expiresAt    DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  emailSyncs   EmailSync[]

  @@map("email_provider")
}

model EmailTemplate {
  id        String   @id @default(cuid())
  userId    String
  name      String
  subject   String
  content   String   @db.Text
  variables Json // Store template variables
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("email_template")
}

// EmailSync model - For storing synced emails from email providers

model EmailSync {
  id          String    @id @default(cuid())
  externalId  String // Original email ID from the provider
  subject     String
  body        String    @db.Text
  htmlBody    String?   @db.Text
  sentAt      DateTime
  receivedAt  DateTime?
  fromEmail   String
  fromName    String?
  toEmail     String[]
  ccEmail     String[]
  bccEmail    String[]
  attachments Json? // Store metadata about attachments
  isRead      Boolean   @default(false)
  isStarred   Boolean   @default(false)
  isDeleted   Boolean   @default(false) // For soft delete in CRM
  folderPath  String? // Original folder/label in email provider
  threadId    String? // For grouping emails in the same conversation
  importance  String? // Priority/importance flag from email
  metadata    Json? // Additional metadata (quoted content, signatures, etc.)
  createdAt   DateTime  @default(now()) // When email was synced to CRM
  updatedAt   DateTime  @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  businessId String?
  business   Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: SetNull)

  providerId    String
  emailProvider EmailProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)

  // Ensure no duplicate emails for the same user
  // Optimize queries for user's emails related to a business
  // Optimize timeline queries
  // Optimize thread-based queries
  @@unique([userId, externalId])
  @@index([userId, businessId])
  @@index([userId, sentAt])
  @@index([threadId])
  @@map("email_syncs")
}

// Add these new enums after the existing ones

enum ChurnRiskLevel {
  low
  medium
  high
  critical

  @@map("churn_risk_level")
}

enum ContactMethod {
  email
  phone
  sms

  @@map("contact_method")
}

// Add this new model near the end of the file, before User model

model SmsMessage {
  id        String           @id @default(cuid())
  content   String
  sentAt    DateTime         @default(now())
  status    SmsStatus
  direction MessageDirection

  // Relations
  businessId String?
  business   Business? @relation(fields: [businessId], references: [id], onDelete: SetNull)
  contactId  String?
  contact    Contact?  @relation(fields: [contactId], references: [id], onDelete: SetNull)

  @@map("sms_messages")
}

enum SmsStatus {
  pending
  sent
  delivered
  failed

  @@map("sms_status")
}

enum MessageDirection {
  inbound
  outbound

  @@map("message_direction")
}

// =============================================
// AI AGENT CEO PLATFORM MODELS
// =============================================

// AI Agent model - Core AI agents in the system
model Agent {
  id              String          @id @default(cuid())
  name            String
  type            AgentType
  description     String?
  status          AgentStatus     @default(idle)
  capabilities    String[]        // JSON array of capabilities
  configuration   Json?           // Agent-specific configuration
  version         String          @default("1.0.0")
  maxConcurrentTasks Int          @default(3)
  
  // Performance metrics
  tasksCompleted  Int             @default(0)
  successRate     Float           @default(0.0)
  avgResponseTime Float           @default(0.0) // in seconds
  lastActive      DateTime?
  
  // AI Model settings
  aiModel         String?         // e.g., "gpt-4", "claude-3-opus"
  apiEndpoint     String?
  apiKey          String?         // Encrypted
  
  // Relations
  workspaceId     String
  workspace       Workspace       @relation(fields: [workspaceId], references: [id])
  tasks           AgentTask[]
  executions      TaskExecution[]
  insights        StrategicInsight[]
  campaigns       EmailCampaign[]
  socialPosts     SocialMediaPost[]
  workflows       WorkflowExecution[]
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  @@index([workspaceId])
  @@index([type])
  @@index([status])
  @@map("agents")
}

enum AgentType {
  ceo_agent        // Strategic planning and decision-making
  sales_agent      // Lead generation and sales automation
  marketing_agent  // Content creation and campaign management
  operations_agent // Process automation and optimization
  analytics_agent  // Data analysis and reporting
  support_agent    // Customer support automation
  
  @@map("agent_type")
}

enum AgentStatus {
  active
  idle
  busy
  error
  maintenance
  offline
  
  @@map("agent_status")
}

// AI Agent Tasks - Work items for AI agents
model AgentTask {
  id              String           @id @default(cuid())
  title           String
  description     String
  type            TaskType
  priority        TaskPriority     @default(medium)
  status          TaskStatus       @default(pending)
  
  // Task data
  input           Json?            // Input parameters for the task
  output          Json?            // Task results/output
  context         Json?            // Additional context data
  
  // Scheduling
  scheduledFor    DateTime?
  startedAt       DateTime?
  completedAt     DateTime?
  dueDate         DateTime?
  
  // Progress tracking
  progress        Int              @default(0) // 0-100
  estimatedDuration Int?           // in minutes
  actualDuration  Int?             // in minutes
  
  // Error handling
  retryCount      Int              @default(0)
  maxRetries      Int              @default(3)
  lastError       String?
  
  // Relations
  agentId         String
  agent           Agent            @relation(fields: [agentId], references: [id])
  workspaceId     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  
  // Optional relations to CRM entities
  businessId      String?
  business        Business?        @relation(fields: [businessId], references: [id])
  contactId       String?
  contact         Contact?         @relation(fields: [contactId], references: [id])
  leadId          String?          // For lead-specific tasks
  
  // Task execution history
  executions      TaskExecution[]
  
  // Workflow integration
  workflowExecutionId String?
  workflowExecution   WorkflowExecution? @relation(fields: [workflowExecutionId], references: [id])
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([workspaceId])
  @@index([agentId])
  @@index([status])
  @@index([type])
  @@index([scheduledFor])
  @@map("agent_tasks")
}

enum TaskType {
  strategic_analysis
  market_research
  lead_qualification
  email_campaign
  content_creation
  data_analysis
  customer_outreach
  social_media_post
  report_generation
  competitive_analysis
  workflow_automation
  
  @@map("task_type")
}

enum TaskPriority {
  low
  medium
  high
  urgent
  critical
  
  @@map("task_priority")
}

enum TaskStatus {
  pending
  queued
  in_progress
  completed
  failed
  cancelled
  retrying
  
  @@map("task_status")
}

// Task Execution History - Detailed execution logs
model TaskExecution {
  id              String         @id @default(cuid())
  
  // Execution details
  startedAt       DateTime       @default(now())
  completedAt     DateTime?
  duration        Int?           // in seconds
  status          ExecutionStatus
  
  // Execution data
  inputData       Json?
  outputData      Json?
  errorMessage    String?
  stackTrace      String?        @db.Text
  
  // Performance metrics
  tokensUsed      Int?           // AI tokens consumed
  cost            Float?         // Execution cost
  apiCalls        Int?           // Number of API calls made
  
  // Relations
  taskId          String
  task            AgentTask      @relation(fields: [taskId], references: [id])
  agentId         String
  agent           Agent          @relation(fields: [agentId], references: [id])
  
  @@index([taskId])
  @@index([agentId])
  @@index([startedAt])
  @@map("task_executions")
}

enum ExecutionStatus {
  running
  completed
  failed
  timeout
  cancelled
  
  @@map("execution_status")
}

// Strategic Intelligence - AI-generated business insights
model StrategicInsight {
  id              String         @id @default(cuid())
  title           String
  category        InsightCategory
  description     String         @db.Text
  
  // Insight data
  confidence      Float          // 0.0 to 1.0
  impact          ImpactLevel
  urgency         UrgencyLevel
  
  // Recommendations
  recommendations Json           // Array of recommended actions
  metrics         Json?          // Supporting metrics and data
  
  // AI attribution
  generatedBy     String         // Agent ID that generated this insight
  agent           Agent          @relation(fields: [generatedBy], references: [id])
  
  // Business context
  businessId      String?
  business        Business?      @relation(fields: [businessId], references: [id])
  
  // Workflow context
  workspaceId     String
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  
  // Status tracking
  status          InsightStatus  @default(new)
  reviewedAt      DateTime?
  implementedAt   DateTime?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([workspaceId])
  @@index([category])
  @@index([impact])
  @@index([status])
  @@map("strategic_insights")
}

enum InsightCategory {
  market_analysis
  customer_behavior
  competitive_intelligence
  revenue_optimization
  operational_efficiency
  risk_assessment
  growth_opportunity
  
  @@map("insight_category")
}

enum ImpactLevel {
  low
  medium
  high
  critical
  
  @@map("impact_level")
}

enum UrgencyLevel {
  low
  medium
  high
  immediate
  
  @@map("urgency_level")
}

enum InsightStatus {
  new
  reviewed
  approved
  implementing
  implemented
  rejected
  
  @@map("insight_status")
}

// Email Campaign Management - AI-powered email campaigns
model EmailCampaign {
  id              String           @id @default(cuid())
  name            String
  description     String?
  type            CampaignType
  status          CampaignStatus   @default(draft)
  
  // Campaign configuration
  subject         String
  content         String           @db.Text
  htmlContent     String?          @db.Text
  
  // Targeting
  targetSegment   Json?            // Targeting criteria
  recipientCount  Int              @default(0)
  
  // Scheduling
  scheduledFor    DateTime?
  sentAt          DateTime?
  
  // Performance metrics
  delivered       Int              @default(0)
  opened          Int              @default(0)
  clicked         Int              @default(0)
  unsubscribed    Int              @default(0)
  bounced         Int              @default(0)
  converted       Int              @default(0)
  
  // AI attribution
  generatedBy     String?
  agent           Agent?           @relation(fields: [generatedBy], references: [id])
  
  // Relations
  workspaceId     String
  workspace       Workspace        @relation(fields: [workspaceId], references: [id])
  
  // Campaign events
  events          CampaignEvent[]
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  @@index([workspaceId])
  @@index([status])
  @@index([type])
  @@map("email_campaigns")
}

enum CampaignType {
  newsletter
  promotional
  nurture
  onboarding
  retention
  reengagement
  product_launch
  
  @@map("campaign_type")
}

enum CampaignStatus {
  draft
  scheduled
  sending
  sent
  paused
  cancelled
  completed
  
  @@map("campaign_status")
}

// Campaign Events - Track email interactions
model CampaignEvent {
  id              String         @id @default(cuid())
  eventType       EventType
  recipientEmail  String
  recipientId     String?        // If we can match to a contact/business
  
  // Event data
  timestamp       DateTime       @default(now())
  metadata        Json?          // Additional event data (links clicked, etc.)
  
  // Relations
  campaignId      String
  campaign        EmailCampaign  @relation(fields: [campaignId], references: [id])
  
  // Optional business/contact relations
  businessId      String?
  business        Business?      @relation(fields: [businessId], references: [id])
  contactId       String?
  contact         Contact?       @relation(fields: [contactId], references: [id])
  
  @@index([campaignId])
  @@index([eventType])
  @@index([recipientEmail])
  @@index([timestamp])
  @@map("campaign_events")
}

enum EventType {
  sent
  delivered
  opened
  clicked
  bounced
  unsubscribed
  complained
  converted
  
  @@map("event_type")
}

// Social Media Management
model SocialMediaPost {
  id              String         @id @default(cuid())
  content         String         @db.Text
  platform        SocialPlatform
  status          PostStatus     @default(draft)
  
  // Media attachments
  mediaUrls       String[]       // Image/video URLs
  mediaTypes      String[]       // MIME types
  
  // Scheduling
  scheduledFor    DateTime?
  publishedAt     DateTime?
  
  // Performance metrics
  likes           Int            @default(0)
  shares          Int            @default(0)
  comments        Int            @default(0)
  clicks          Int            @default(0)
  impressions     Int            @default(0)
  engagement      Float          @default(0.0) // Engagement rate
  
  // AI attribution
  generatedBy     String?
  agent           Agent?         @relation(fields: [generatedBy], references: [id])
  
  // Relations
  workspaceId     String
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  
  // Campaign relation
  campaignId      String?
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([workspaceId])
  @@index([platform])
  @@index([status])
  @@index([scheduledFor])
  @@map("social_media_posts")
}

enum SocialPlatform {
  linkedin
  twitter
  facebook
  instagram
  youtube
  tiktok
  
  @@map("social_platform")
}

enum PostStatus {
  draft
  scheduled
  published
  failed
  deleted
  
  @@map("post_status")
}

// Workflow Automation - n8n integration
model WorkflowExecution {
  id              String         @id @default(cuid())
  workflowId      String         // n8n workflow ID
  workflowName    String
  
  // Execution details
  executionId     String?        // n8n execution ID
  status          WorkflowStatus @default(running)
  startedAt       DateTime       @default(now())
  completedAt     DateTime?
  duration        Int?           // in seconds
  
  // Execution data
  input           Json?
  output          Json?
  error           String?        @db.Text
  
  // Trigger information
  triggeredBy     TriggerType
  triggerData     Json?
  
  // AI agent relation
  agentId         String?
  agent           Agent?         @relation(fields: [agentId], references: [id])
  
  // Relations
  workspaceId     String
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  
  // Child tasks created by this workflow
  tasks           AgentTask[]
  webhookLogs     WebhookLog[]
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([workspaceId])
  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
  @@map("workflow_executions")
}

enum WorkflowStatus {
  running
  completed
  failed
  cancelled
  timeout
  
  @@map("workflow_status")
}

enum TriggerType {
  webhook
  schedule
  manual
  agent_task
  lead_status_change
  email_event
  
  @@map("trigger_type")
}

// Webhook Logs - Track webhook calls for debugging
model WebhookLog {
  id              String         @id @default(cuid())
  endpoint        String
  method          String
  
  // Request data
  headers         Json?
  payload         Json?
  
  // Response data
  statusCode      Int
  responseBody    Json?
  responseTime    Int            // in milliseconds
  
  // Error information
  error           String?
  
  // Relations
  workspaceId     String?
  workspace       Workspace?     @relation(fields: [workspaceId], references: [id])
  
  // Workflow execution relation
  workflowExecutionId String?
  workflowExecution   WorkflowExecution? @relation(fields: [workflowExecutionId], references: [id])
  
  timestamp       DateTime       @default(now())
  
  @@index([endpoint])
  @@index([statusCode])
  @@index([timestamp])
  @@map("webhook_logs")
}

// Business Metrics - Track key business KPIs
model BusinessMetric {
  id              String         @id @default(cuid())
  name            String
  category        MetricCategory
  value           Float
  unit            String?        // e.g., "USD", "%", "count"
  
  // Time series data
  period          String         // e.g., "daily", "weekly", "monthly"
  periodStart     DateTime
  periodEnd       DateTime
  
  // Calculated metrics
  previousValue   Float?
  changePercent   Float?
  trend           TrendDirection?
  
  // Relations
  workspaceId     String
  workspace       Workspace      @relation(fields: [workspaceId], references: [id])
  
  // Optional business relation
  businessId      String?
  business        Business?      @relation(fields: [businessId], references: [id])
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  @@index([workspaceId])
  @@index([category])
  @@index([periodStart])
  @@unique([workspaceId, name, periodStart])
  @@map("business_metrics")
}

enum MetricCategory {
  revenue
  leads
  customers
  marketing
  operations
  support
  
  @@map("metric_category")
}

enum TrendDirection {
  up
  down
  stable
  
  @@map("trend_direction")
}

// =============================================
// UPDATE EXISTING MODELS WITH AI RELATIONS
// =============================================

// Add AI agent relations to existing Workspace model
